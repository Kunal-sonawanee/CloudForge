import * as __WEBPACK_EXTERNAL_MODULE_copy_webpack_plugin_c1a9f86d__ from "copy-webpack-plugin";
import * as __WEBPACK_EXTERNAL_MODULE_webpack__ from "webpack";
import { createRequire as __WEBPACK_EXTERNAL_createRequire } from "node:module";
/******/ var __webpack_modules__ = ({

/***/ "./lib/patterns.ts":
/*!*************************!*\
  !*** ./lib/patterns.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   choose: () => (/* binding */ choose),
/* harmony export */   chooseAndTransform: () => (/* binding */ chooseAndTransform),
/* harmony export */   transform: () => (/* binding */ transform),
/* harmony export */   versions: () => (/* binding */ versions)
/* harmony export */ });
const files = {
    "0.21.3": [
        "distutils.tar",
        "package.json",
        "pyodide_py.tar",
        "pyodide.asm.js",
        "pyodide.asm.js",
        "pyodide.asm.data",
        "pyodide.asm.wasm",
        "repodata.json",
    ],
    "0.22.1": [
        "package.json",
        "pyodide_py.tar",
        "pyodide.asm.js",
        "pyodide.asm.data",
        "pyodide.asm.wasm",
        "repodata.json",
    ],
    "0.23.0": ["package.json", "pyodide.asm.js", "pyodide.asm.wasm", "repodata.json", "python_stdlib.zip"],
    "0.24.0": function (pkg) {
        if (!pkg.files) {
            return [];
        }
        // list of files to ignore
        const ignore = [/^pyodide.m?js.*/, /.+\.d\.ts$/, /.+\.html$/];
        // files to ensure are always included
        const always = ["package.json"];
        const filtered = pkg.files.filter((file) => {
            return !ignore.some((v) => file.match(v));
        });
        always.forEach((f) => {
            if (!filtered.includes(f)) {
                filtered.push(f);
            }
        });
        return filtered;
    },
};
const versions = Object.keys(files);
/**
 * Choose the set of files to match for copying out of pyodide.
 * Based on the version passed. If no version is available in files to match
 * that is great enough an empty array is returned.
 * @param version
 * @returns {string[]}
 */
function choose(version = "0.0.0") {
    let chosen = [];
    for (let i = 0; i < versions.length; i++) {
        if (version >= versions[i]) {
            chosen = files[versions[i]];
        }
    }
    return chosen;
}
/**
 * Choose the set of files to match for copying out of pyodide.
 * Based on the version passed. If no version is available in files to match
 * that is great enough an empty array is returned.
 * @param version
 * @param pattern
 * @param packageIndexUrl
 * @returns {PyodideObjectPattern[]}
 */
function transform(version, pattern, packageIndexUrl) {
    return pattern.map((name) => {
        let transform;
        if (packageIndexUrl && name == "pyodide.asm.js") {
            transform = {
                transformer: (input) => {
                    return input
                        .toString()
                        .replace("resolvePath(file_name,API.config.indexURL)", `resolvePath(file_name,"${packageIndexUrl}")`);
                },
            };
        }
        return { from: name, to: name, transform };
    });
}
function chooseAndTransform(pkg, packageIndexUrl) {
    packageIndexUrl = packageIndexUrl ?? `https://cdn.jsdelivr.net/pyodide/v${pkg.version}/full/`;
    let files = choose(pkg.version);
    if (typeof files === "function") {
        files = files(pkg);
    }
    return transform(pkg.version, files, packageIndexUrl);
}


/***/ }),

/***/ "copy-webpack-plugin":
/*!**************************************!*\
  !*** external "copy-webpack-plugin" ***!
  \**************************************/
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE_copy_webpack_plugin_c1a9f86d__;

/***/ }),

/***/ "webpack":
/*!**************************!*\
  !*** external "webpack" ***!
  \**************************/
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE_webpack__;

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("assert");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("path");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("url");

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/compat get default export */
/******/ (() => {
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = (module) => {
/******/ 		var getter = module && module.__esModule ?
/******/ 			() => (module['default']) :
/******/ 			() => (module);
/******/ 		__webpack_require__.d(getter, { a: getter });
/******/ 		return getter;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PyodidePlugin: () => (/* binding */ PyodidePlugin),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ "fs");
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! url */ "url");
/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(url__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! assert */ "assert");
/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(assert__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! path */ "path");
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var copy_webpack_plugin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! copy-webpack-plugin */ "copy-webpack-plugin");
/* harmony import */ var webpack__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! webpack */ "webpack");
/* harmony import */ var _lib_patterns__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/patterns */ "./lib/patterns.ts");








function noop(_) {
    return _;
}
let dirname;
try {
    // @ts-ignore import.meta is only available in esm...
    dirname = path__WEBPACK_IMPORTED_MODULE_3___default().dirname(url__WEBPACK_IMPORTED_MODULE_1___default().fileURLToPath(import.meta.url));
}
catch (e) {
    noop(e);
}
class PyodidePlugin extends copy_webpack_plugin__WEBPACK_IMPORTED_MODULE_4__["default"] {
    globalLoadPyodide;
    constructor(options = {}) {
        let outDirectory = options.outDirectory || "pyodide";
        if (outDirectory.startsWith("/")) {
            outDirectory = outDirectory.slice(1);
        }
        const globalLoadPyodide = options.globalLoadPyodide || false;
        const pyodidePackagePath = tryGetPyodidePath(options.pyodideDependencyPath);
        const pkg = tryResolvePyodidePackage(pyodidePackagePath, options.version);
        options.patterns = _lib_patterns__WEBPACK_IMPORTED_MODULE_6__.chooseAndTransform(pkg, options.packageIndexUrl).map((pattern) => {
            return {
                from: path__WEBPACK_IMPORTED_MODULE_3___default().resolve(pyodidePackagePath, pattern.from),
                to: path__WEBPACK_IMPORTED_MODULE_3___default().join(outDirectory, pattern.to),
                transform: pattern.transform,
            };
        });
        assert__WEBPACK_IMPORTED_MODULE_2___default().ok(options.patterns.length > 0, `Unsupported version of pyodide. Must use >=${_lib_patterns__WEBPACK_IMPORTED_MODULE_6__.versions[0]}`);
        // we have to delete all pyodide plugin options before calling super. Rest of options passed to copy webpack plugin
        delete options.packageIndexUrl;
        delete options.globalLoadPyodide;
        delete options.outDirectory;
        delete options.version;
        delete options.pyodideDependencyPath;
        super(options);
        this.globalLoadPyodide = globalLoadPyodide;
    }
    apply(compiler) {
        super.apply(compiler);
        compiler.hooks.compilation.tap(this.constructor.name, (compilation) => {
            const compilationHooks = webpack__WEBPACK_IMPORTED_MODULE_5__["default"].NormalModule.getCompilationHooks(compilation);
            compilationHooks.beforeLoaders.tap(this.constructor.name, (loaders, normalModule) => {
                const matches = normalModule.userRequest.match(/pyodide\.m?js$/);
                if (matches) {
                    // add a new loader specifically to handle pyodide.m?js. See loader.ts for functionalidy
                    loaders.push({
                        loader: path__WEBPACK_IMPORTED_MODULE_3___default().resolve(dirname, "loader.cjs"),
                        options: {
                            globalLoadPyodide: this.globalLoadPyodide,
                            isModule: matches[0].endsWith(".mjs"),
                        },
                        ident: "pyodide",
                        type: null,
                    });
                }
            });
        });
    }
}
/**
 * Try to find the pyodide path. Can't use require.resolve because it is not supported in
 * module builds. Nodes import.meta.resolve is experimental and still very new as of node 19.x
 * This method is works universally under the assumption of an install in node_modules/pyodide
 * @param pyodidePath
 * @returns
 */
function tryGetPyodidePath(pyodidePath) {
    if (pyodidePath) {
        return path__WEBPACK_IMPORTED_MODULE_3___default().resolve(pyodidePath);
    }
    let pyodideEntrypoint = "";
    if (true) {
        try {
            pyodideEntrypoint = __WEBPACK_EXTERNAL_createRequire(import.meta.url).resolve("pyodide");
        }
        catch (e) {
            noop(e);
        }
    }
    else {}
    const walk = (p) => {
        const stat = fs__WEBPACK_IMPORTED_MODULE_0___default().statSync(p);
        if (stat.isFile()) {
            return walk(path__WEBPACK_IMPORTED_MODULE_3___default().dirname(p));
        }
        if (stat.isDirectory()) {
            if (path__WEBPACK_IMPORTED_MODULE_3___default().basename(p) === "node_modules") {
                throw new Error("unable to locate pyodide package. You can define it manually with pyodidePath if you're trying to test something novel");
            }
            for (const dirent of fs__WEBPACK_IMPORTED_MODULE_0___default().readdirSync(p, { withFileTypes: true })) {
                if (dirent.name !== "package.json" || dirent.isDirectory()) {
                    continue;
                }
                try {
                    const pkg = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(path__WEBPACK_IMPORTED_MODULE_3___default().join(p, dirent.name), "utf-8");
                    const pkgJson = JSON.parse(pkg);
                    if (pkgJson.name === "pyodide") {
                        // found pyodide package root. Exit this thing
                        return p;
                    }
                }
                catch (e) {
                    throw new Error("unable to locate and parse pyodide package.json. You can define it manually with pyodidePath if you're trying to test something novel");
                }
            }
            return walk(path__WEBPACK_IMPORTED_MODULE_3___default().dirname(p));
        }
    };
    return walk(pyodideEntrypoint);
}
/**
 * Read the pyodide package dependency package.json to return necessary metadata
 * @param version
 * @returns
 */
function tryResolvePyodidePackage(pyodidePath, version) {
    if (version) {
        return { version };
    }
    const pkgPath = path__WEBPACK_IMPORTED_MODULE_3___default().resolve(pyodidePath, "package.json");
    try {
        const pkg = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(pkgPath, "utf-8");
        return JSON.parse(pkg);
    }
    catch (e) {
        throw new Error(`unable to read package.json from pyodide dependency in ${pkgPath}`);
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PyodidePlugin);

})();

var __webpack_exports__PyodidePlugin = __webpack_exports__.PyodidePlugin;
var __webpack_exports__default = __webpack_exports__["default"];
export { __webpack_exports__PyodidePlugin as PyodidePlugin, __webpack_exports__default as default };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,