(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("pyodide-webpack-loader", [], factory);
	else if(typeof exports === 'object')
		exports["pyodide-webpack-loader"] = factory();
	else
		root["pyodide-webpack-loader"] = factory();
})((typeof self !== 'undefined' ? self : this), () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./loader.ts":
/*!*******************!*\
  !*** ./loader.ts ***!
  \*******************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const acorn_1 = __webpack_require__(/*! acorn */ "acorn");
const acorn_import_assertions_1 = __webpack_require__(/*! acorn-import-assertions */ "acorn-import-assertions");
const esbuild_1 = __importDefault(__webpack_require__(/*! esbuild */ "esbuild"));
const walk = __webpack_require__(/*! acorn-walk */ "acorn-walk");
const parser = acorn_1.Parser.extend(acorn_import_assertions_1.importAssertions);
class PyodideParser {
    constructor(source, options) {
        this.delta = 0;
        this.ast = parser.parse(source, {
            ecmaVersion: 2020,
            sourceType: options.isModule ? "module" : "script",
        });
        this.options = options;
        this.source = source;
    }
    parse() {
        // eslint-disable-next-line
        const self = this;
        walk.simple(this.ast, {
            ExpressionStatement(node) {
                self.walkExpressionStatement(node);
            },
        });
    }
    replace(statement, str) {
        const len = statement.end - statement.start;
        const start = this.source.slice(0, statement.start + this.delta);
        const end = this.source.slice(statement.end + this.delta);
        this.source = `${start}${str}${end}`;
        this.delta += str.length - len;
        return str;
    }
    walkExpressionStatement(statement) {
        var _a, _b;
        // getting dumb here. Just want to do some quick things.
        if (this.options.globalLoadPyodide) {
            return;
        }
        const assignment = (_b = (_a = statement.expression) === null || _a === void 0 ? void 0 : _a.left) === null || _b === void 0 ? void 0 : _b.object;
        if ((assignment === null || assignment === void 0 ? void 0 : assignment.type) !== "Identifier" || (assignment === null || assignment === void 0 ? void 0 : assignment.name) !== "globalThis") {
            return;
        }
        // remove global load pyodide
        this.replace(statement, "({});");
    }
}
function addNamedExports(source, options) {
    // convoluted way to inject exports. In the future if this
    // gets too complicated opt for a js compiler that can take in
    // estree AST and manipulate the AST tree directly instead.
    // for now though this works and keeps dependencies down to a minimum
    if (options.isModule) {
        // esm module already has exports like we expect
        return source;
    }
    const newSource = source.split("\n");
    const commonExports = "module.exports = {loadPyodide: loadPyodide.loadPyodide, version: loadPyodide.version};";
    for (let i = 0; i < newSource.length; i++) {
        if (!newSource[i].includes("sourceMappingURL"))
            continue;
        newSource.splice(i, 0, commonExports);
        break;
    }
    return newSource.join("\n");
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function fc(v) {
    return v;
}
function default_1(source) {
    // @ts-expect-error this has a type any, but we know this is a loader context
    const self = fc(this);
    const options = self.getOptions();
    let banner = "module.exports =";
    let footer = "";
    if (options.isModule) {
        source = esbuild_1.default.transformSync(source, {
            banner: "const module={exports:{}};",
            footer: "module.exports;",
            format: "cjs",
        }).code;
        banner = "const out =";
        // not sure how to make this better. Need some way to dynamically export these but esm provides no way
        footer = "export const loadPyodide = out.loadPyodide;\nexport const version = out.version;";
    }
    // this._module.parser.state.module = this._module;
    // parse with the original parser... causes errors because we do not want this to
    // actually be evaluated and added to webpack's tree
    // const ast = this._module.parser.parse(source, {
    //   module: this._module,
    //   current: this._module,
    //   options: {},
    //   source: source
    // });
    // parse with our own parser
    const p = new PyodideParser(source, options);
    p.parse();
    const finalSource = addNamedExports(p.source, options);
    return `${banner} eval(${JSON.stringify(finalSource)});\n${footer}`;
}
exports["default"] = default_1;


/***/ }),

/***/ "acorn":
/*!************************!*\
  !*** external "acorn" ***!
  \************************/
/***/ ((module) => {

module.exports = require("acorn");

/***/ }),

/***/ "acorn-import-assertions":
/*!******************************************!*\
  !*** external "acorn-import-assertions" ***!
  \******************************************/
/***/ ((module) => {

module.exports = require("acorn-import-assertions");

/***/ }),

/***/ "acorn-walk":
/*!*****************************!*\
  !*** external "acorn-walk" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("acorn-walk");

/***/ }),

/***/ "esbuild":
/*!**************************!*\
  !*** external "esbuild" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("esbuild");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./loader.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,