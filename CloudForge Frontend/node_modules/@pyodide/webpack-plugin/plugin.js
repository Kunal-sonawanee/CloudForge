(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("PyodidePlugin", [], factory);
	else if(typeof exports === 'object')
		exports["PyodidePlugin"] = factory();
	else
		root["PyodidePlugin"] = factory();
})((typeof self !== 'undefined' ? self : this), () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./lib/patterns.ts":
/*!*************************!*\
  !*** ./lib/patterns.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.chooseAndTransform = exports.transform = exports.choose = exports.versions = void 0;
const files = {
    "0.21.3": [
        "distutils.tar",
        "package.json",
        "pyodide_py.tar",
        "pyodide.asm.js",
        "pyodide.asm.js",
        "pyodide.asm.data",
        "pyodide.asm.wasm",
        "repodata.json",
    ],
    "0.22.1": [
        "package.json",
        "pyodide_py.tar",
        "pyodide.asm.js",
        "pyodide.asm.data",
        "pyodide.asm.wasm",
        "repodata.json",
    ],
    "0.23.0": ["package.json", "pyodide.asm.js", "pyodide.asm.wasm", "repodata.json", "python_stdlib.zip"],
    "0.24.0": function (pkg) {
        if (!pkg.files) {
            return [];
        }
        // list of files to ignore
        const ignore = [/^pyodide.m?js.*/, /.+\.d\.ts$/, /.+\.html$/];
        // files to ensure are always included
        const always = ["package.json"];
        const filtered = pkg.files.filter((file) => {
            return !ignore.some((v) => file.match(v));
        });
        always.forEach((f) => {
            if (!filtered.includes(f)) {
                filtered.push(f);
            }
        });
        return filtered;
    },
};
exports.versions = Object.keys(files);
/**
 * Choose the set of files to match for copying out of pyodide.
 * Based on the version passed. If no version is available in files to match
 * that is great enough an empty array is returned.
 * @param version
 * @returns {string[]}
 */
function choose(version = "0.0.0") {
    let chosen = [];
    for (let i = 0; i < exports.versions.length; i++) {
        if (version >= exports.versions[i]) {
            chosen = files[exports.versions[i]];
        }
    }
    return chosen;
}
exports.choose = choose;
/**
 * Choose the set of files to match for copying out of pyodide.
 * Based on the version passed. If no version is available in files to match
 * that is great enough an empty array is returned.
 * @param version
 * @param pattern
 * @param packageIndexUrl
 * @returns {PyodideObjectPattern[]}
 */
function transform(version, pattern, packageIndexUrl) {
    return pattern.map((name) => {
        let transform;
        if (packageIndexUrl && name == "pyodide.asm.js") {
            transform = {
                transformer: (input) => {
                    return input
                        .toString()
                        .replace("resolvePath(file_name,API.config.indexURL)", `resolvePath(file_name,"${packageIndexUrl}")`);
                },
            };
        }
        return { from: name, to: name, transform };
    });
}
exports.transform = transform;
function chooseAndTransform(pkg, packageIndexUrl) {
    packageIndexUrl = packageIndexUrl !== null && packageIndexUrl !== void 0 ? packageIndexUrl : `https://cdn.jsdelivr.net/pyodide/v${pkg.version}/full/`;
    let files = choose(pkg.version);
    if (typeof files === "function") {
        files = files(pkg);
    }
    return transform(pkg.version, files, packageIndexUrl);
}
exports.chooseAndTransform = chooseAndTransform;


/***/ }),

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PyodidePlugin = void 0;
const fs_1 = __importDefault(__webpack_require__(/*! fs */ "fs"));
const assert_1 = __importDefault(__webpack_require__(/*! assert */ "assert"));
const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
const copy_webpack_plugin_1 = __importDefault(__webpack_require__(/*! copy-webpack-plugin */ "copy-webpack-plugin"));
const webpack_1 = __importDefault(__webpack_require__(/*! webpack */ "webpack"));
const patterns = __importStar(__webpack_require__(/*! ./lib/patterns */ "./lib/patterns.ts"));
const node_module_1 = __webpack_require__(/*! node:module */ "node:module");
function noop(_) {
    return _;
}
let dirname;
try {
    // @ts-ignore import.meta is only available in esm...
    dirname = __dirname;
}
catch (e) {
    noop(e);
}
class PyodidePlugin extends copy_webpack_plugin_1.default {
    constructor(options = {}) {
        let outDirectory = options.outDirectory || "pyodide";
        if (outDirectory.startsWith("/")) {
            outDirectory = outDirectory.slice(1);
        }
        const globalLoadPyodide = options.globalLoadPyodide || false;
        const pyodidePackagePath = tryGetPyodidePath(options.pyodideDependencyPath);
        const pkg = tryResolvePyodidePackage(pyodidePackagePath, options.version);
        options.patterns = patterns.chooseAndTransform(pkg, options.packageIndexUrl).map((pattern) => {
            return {
                from: path_1.default.resolve(pyodidePackagePath, pattern.from),
                to: path_1.default.join(outDirectory, pattern.to),
                transform: pattern.transform,
            };
        });
        assert_1.default.ok(options.patterns.length > 0, `Unsupported version of pyodide. Must use >=${patterns.versions[0]}`);
        // we have to delete all pyodide plugin options before calling super. Rest of options passed to copy webpack plugin
        delete options.packageIndexUrl;
        delete options.globalLoadPyodide;
        delete options.outDirectory;
        delete options.version;
        delete options.pyodideDependencyPath;
        super(options);
        this.globalLoadPyodide = globalLoadPyodide;
    }
    apply(compiler) {
        super.apply(compiler);
        compiler.hooks.compilation.tap(this.constructor.name, (compilation) => {
            const compilationHooks = webpack_1.default.NormalModule.getCompilationHooks(compilation);
            compilationHooks.beforeLoaders.tap(this.constructor.name, (loaders, normalModule) => {
                const matches = normalModule.userRequest.match(/pyodide\.m?js$/);
                if (matches) {
                    // add a new loader specifically to handle pyodide.m?js. See loader.ts for functionalidy
                    loaders.push({
                        loader: path_1.default.resolve(dirname, "loader.cjs"),
                        options: {
                            globalLoadPyodide: this.globalLoadPyodide,
                            isModule: matches[0].endsWith(".mjs"),
                        },
                        ident: "pyodide",
                        type: null,
                    });
                }
            });
        });
    }
}
exports.PyodidePlugin = PyodidePlugin;
/**
 * Try to find the pyodide path. Can't use require.resolve because it is not supported in
 * module builds. Nodes import.meta.resolve is experimental and still very new as of node 19.x
 * This method is works universally under the assumption of an install in node_modules/pyodide
 * @param pyodidePath
 * @returns
 */
function tryGetPyodidePath(pyodidePath) {
    if (pyodidePath) {
        return path_1.default.resolve(pyodidePath);
    }
    let pyodideEntrypoint = "";
    if (true) {
        try {
            pyodideEntrypoint = require.resolve("pyodide");
        }
        catch (e) {
            noop(e);
        }
    }
    else {}
    const walk = (p) => {
        const stat = fs_1.default.statSync(p);
        if (stat.isFile()) {
            return walk(path_1.default.dirname(p));
        }
        if (stat.isDirectory()) {
            if (path_1.default.basename(p) === "node_modules") {
                throw new Error("unable to locate pyodide package. You can define it manually with pyodidePath if you're trying to test something novel");
            }
            for (const dirent of fs_1.default.readdirSync(p, { withFileTypes: true })) {
                if (dirent.name !== "package.json" || dirent.isDirectory()) {
                    continue;
                }
                try {
                    const pkg = fs_1.default.readFileSync(path_1.default.join(p, dirent.name), "utf-8");
                    const pkgJson = JSON.parse(pkg);
                    if (pkgJson.name === "pyodide") {
                        // found pyodide package root. Exit this thing
                        return p;
                    }
                }
                catch (e) {
                    throw new Error("unable to locate and parse pyodide package.json. You can define it manually with pyodidePath if you're trying to test something novel");
                }
            }
            return walk(path_1.default.dirname(p));
        }
    };
    return walk(pyodideEntrypoint);
}
/**
 * Read the pyodide package dependency package.json to return necessary metadata
 * @param version
 * @returns
 */
function tryResolvePyodidePackage(pyodidePath, version) {
    if (version) {
        return { version };
    }
    const pkgPath = path_1.default.resolve(pyodidePath, "package.json");
    try {
        const pkg = fs_1.default.readFileSync(pkgPath, "utf-8");
        return JSON.parse(pkg);
    }
    catch (e) {
        throw new Error(`unable to read package.json from pyodide dependency in ${pkgPath}`);
    }
}
exports["default"] = PyodidePlugin;


/***/ }),

/***/ "copy-webpack-plugin":
/*!**************************************!*\
  !*** external "copy-webpack-plugin" ***!
  \**************************************/
/***/ ((module) => {

module.exports = require("copy-webpack-plugin");

/***/ }),

/***/ "webpack":
/*!**************************!*\
  !*** external "webpack" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("webpack");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "node:module":
/*!******************************!*\
  !*** external "node:module" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:module");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./index.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,